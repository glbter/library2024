// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"library/internal/store/model"
)

func newBookLendTransaction(db *gorm.DB, opts ...gen.DOOption) bookLendTransaction {
	_bookLendTransaction := bookLendTransaction{}

	_bookLendTransaction.bookLendTransactionDo.UseDB(db, opts...)
	_bookLendTransaction.bookLendTransactionDo.UseModel(&model.BookLendTransaction{})

	tableName := _bookLendTransaction.bookLendTransactionDo.TableName()
	_bookLendTransaction.ALL = field.NewAsterisk(tableName)
	_bookLendTransaction.RequestID = field.NewField(tableName, "request_id")
	_bookLendTransaction.CreatedAt = field.NewTime(tableName, "created_at")
	_bookLendTransaction.DueDate = field.NewTime(tableName, "due_date")

	_bookLendTransaction.fillFieldMap()

	return _bookLendTransaction
}

type bookLendTransaction struct {
	bookLendTransactionDo

	ALL       field.Asterisk
	RequestID field.Field
	CreatedAt field.Time
	DueDate   field.Time

	fieldMap map[string]field.Expr
}

func (b bookLendTransaction) Table(newTableName string) *bookLendTransaction {
	b.bookLendTransactionDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bookLendTransaction) As(alias string) *bookLendTransaction {
	b.bookLendTransactionDo.DO = *(b.bookLendTransactionDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bookLendTransaction) updateTableName(table string) *bookLendTransaction {
	b.ALL = field.NewAsterisk(table)
	b.RequestID = field.NewField(table, "request_id")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.DueDate = field.NewTime(table, "due_date")

	b.fillFieldMap()

	return b
}

func (b *bookLendTransaction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bookLendTransaction) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 3)
	b.fieldMap["request_id"] = b.RequestID
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["due_date"] = b.DueDate
}

func (b bookLendTransaction) clone(db *gorm.DB) bookLendTransaction {
	b.bookLendTransactionDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bookLendTransaction) replaceDB(db *gorm.DB) bookLendTransaction {
	b.bookLendTransactionDo.ReplaceDB(db)
	return b
}

type bookLendTransactionDo struct{ gen.DO }

type IBookLendTransactionDo interface {
	gen.SubQuery
	Debug() IBookLendTransactionDo
	WithContext(ctx context.Context) IBookLendTransactionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBookLendTransactionDo
	WriteDB() IBookLendTransactionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBookLendTransactionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBookLendTransactionDo
	Not(conds ...gen.Condition) IBookLendTransactionDo
	Or(conds ...gen.Condition) IBookLendTransactionDo
	Select(conds ...field.Expr) IBookLendTransactionDo
	Where(conds ...gen.Condition) IBookLendTransactionDo
	Order(conds ...field.Expr) IBookLendTransactionDo
	Distinct(cols ...field.Expr) IBookLendTransactionDo
	Omit(cols ...field.Expr) IBookLendTransactionDo
	Join(table schema.Tabler, on ...field.Expr) IBookLendTransactionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBookLendTransactionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBookLendTransactionDo
	Group(cols ...field.Expr) IBookLendTransactionDo
	Having(conds ...gen.Condition) IBookLendTransactionDo
	Limit(limit int) IBookLendTransactionDo
	Offset(offset int) IBookLendTransactionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBookLendTransactionDo
	Unscoped() IBookLendTransactionDo
	Create(values ...*model.BookLendTransaction) error
	CreateInBatches(values []*model.BookLendTransaction, batchSize int) error
	Save(values ...*model.BookLendTransaction) error
	First() (*model.BookLendTransaction, error)
	Take() (*model.BookLendTransaction, error)
	Last() (*model.BookLendTransaction, error)
	Find() ([]*model.BookLendTransaction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BookLendTransaction, err error)
	FindInBatches(result *[]*model.BookLendTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BookLendTransaction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBookLendTransactionDo
	Assign(attrs ...field.AssignExpr) IBookLendTransactionDo
	Joins(fields ...field.RelationField) IBookLendTransactionDo
	Preload(fields ...field.RelationField) IBookLendTransactionDo
	FirstOrInit() (*model.BookLendTransaction, error)
	FirstOrCreate() (*model.BookLendTransaction, error)
	FindByPage(offset int, limit int) (result []*model.BookLendTransaction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBookLendTransactionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bookLendTransactionDo) Debug() IBookLendTransactionDo {
	return b.withDO(b.DO.Debug())
}

func (b bookLendTransactionDo) WithContext(ctx context.Context) IBookLendTransactionDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bookLendTransactionDo) ReadDB() IBookLendTransactionDo {
	return b.Clauses(dbresolver.Read)
}

func (b bookLendTransactionDo) WriteDB() IBookLendTransactionDo {
	return b.Clauses(dbresolver.Write)
}

func (b bookLendTransactionDo) Session(config *gorm.Session) IBookLendTransactionDo {
	return b.withDO(b.DO.Session(config))
}

func (b bookLendTransactionDo) Clauses(conds ...clause.Expression) IBookLendTransactionDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bookLendTransactionDo) Returning(value interface{}, columns ...string) IBookLendTransactionDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bookLendTransactionDo) Not(conds ...gen.Condition) IBookLendTransactionDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bookLendTransactionDo) Or(conds ...gen.Condition) IBookLendTransactionDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bookLendTransactionDo) Select(conds ...field.Expr) IBookLendTransactionDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bookLendTransactionDo) Where(conds ...gen.Condition) IBookLendTransactionDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bookLendTransactionDo) Order(conds ...field.Expr) IBookLendTransactionDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bookLendTransactionDo) Distinct(cols ...field.Expr) IBookLendTransactionDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bookLendTransactionDo) Omit(cols ...field.Expr) IBookLendTransactionDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bookLendTransactionDo) Join(table schema.Tabler, on ...field.Expr) IBookLendTransactionDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bookLendTransactionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBookLendTransactionDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bookLendTransactionDo) RightJoin(table schema.Tabler, on ...field.Expr) IBookLendTransactionDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bookLendTransactionDo) Group(cols ...field.Expr) IBookLendTransactionDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bookLendTransactionDo) Having(conds ...gen.Condition) IBookLendTransactionDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bookLendTransactionDo) Limit(limit int) IBookLendTransactionDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bookLendTransactionDo) Offset(offset int) IBookLendTransactionDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bookLendTransactionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBookLendTransactionDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bookLendTransactionDo) Unscoped() IBookLendTransactionDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bookLendTransactionDo) Create(values ...*model.BookLendTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bookLendTransactionDo) CreateInBatches(values []*model.BookLendTransaction, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bookLendTransactionDo) Save(values ...*model.BookLendTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bookLendTransactionDo) First() (*model.BookLendTransaction, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookLendTransaction), nil
	}
}

func (b bookLendTransactionDo) Take() (*model.BookLendTransaction, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookLendTransaction), nil
	}
}

func (b bookLendTransactionDo) Last() (*model.BookLendTransaction, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookLendTransaction), nil
	}
}

func (b bookLendTransactionDo) Find() ([]*model.BookLendTransaction, error) {
	result, err := b.DO.Find()
	return result.([]*model.BookLendTransaction), err
}

func (b bookLendTransactionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BookLendTransaction, err error) {
	buf := make([]*model.BookLendTransaction, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bookLendTransactionDo) FindInBatches(result *[]*model.BookLendTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bookLendTransactionDo) Attrs(attrs ...field.AssignExpr) IBookLendTransactionDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bookLendTransactionDo) Assign(attrs ...field.AssignExpr) IBookLendTransactionDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bookLendTransactionDo) Joins(fields ...field.RelationField) IBookLendTransactionDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bookLendTransactionDo) Preload(fields ...field.RelationField) IBookLendTransactionDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bookLendTransactionDo) FirstOrInit() (*model.BookLendTransaction, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookLendTransaction), nil
	}
}

func (b bookLendTransactionDo) FirstOrCreate() (*model.BookLendTransaction, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookLendTransaction), nil
	}
}

func (b bookLendTransactionDo) FindByPage(offset int, limit int) (result []*model.BookLendTransaction, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bookLendTransactionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bookLendTransactionDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bookLendTransactionDo) Delete(models ...*model.BookLendTransaction) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bookLendTransactionDo) withDO(do gen.Dao) *bookLendTransactionDo {
	b.DO = *do.(*gen.DO)
	return b
}
