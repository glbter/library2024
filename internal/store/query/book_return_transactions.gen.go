// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"library/internal/store/model"
)

func newBookReturnTransaction(db *gorm.DB, opts ...gen.DOOption) bookReturnTransaction {
	_bookReturnTransaction := bookReturnTransaction{}

	_bookReturnTransaction.bookReturnTransactionDo.UseDB(db, opts...)
	_bookReturnTransaction.bookReturnTransactionDo.UseModel(&model.BookReturnTransaction{})

	tableName := _bookReturnTransaction.bookReturnTransactionDo.TableName()
	_bookReturnTransaction.ALL = field.NewAsterisk(tableName)
	_bookReturnTransaction.RequestID = field.NewField(tableName, "request_id")
	_bookReturnTransaction.CreatedAt = field.NewTime(tableName, "created_at")

	_bookReturnTransaction.fillFieldMap()

	return _bookReturnTransaction
}

type bookReturnTransaction struct {
	bookReturnTransactionDo bookReturnTransactionDo

	ALL       field.Asterisk
	RequestID field.Field
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (b bookReturnTransaction) Table(newTableName string) *bookReturnTransaction {
	b.bookReturnTransactionDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bookReturnTransaction) As(alias string) *bookReturnTransaction {
	b.bookReturnTransactionDo.DO = *(b.bookReturnTransactionDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bookReturnTransaction) updateTableName(table string) *bookReturnTransaction {
	b.ALL = field.NewAsterisk(table)
	b.RequestID = field.NewField(table, "request_id")
	b.CreatedAt = field.NewTime(table, "created_at")

	b.fillFieldMap()

	return b
}

func (b *bookReturnTransaction) WithContext(ctx context.Context) IBookReturnTransactionDo {
	return b.bookReturnTransactionDo.WithContext(ctx)
}

func (b bookReturnTransaction) TableName() string { return b.bookReturnTransactionDo.TableName() }

func (b bookReturnTransaction) Alias() string { return b.bookReturnTransactionDo.Alias() }

func (b bookReturnTransaction) Columns(cols ...field.Expr) gen.Columns {
	return b.bookReturnTransactionDo.Columns(cols...)
}

func (b *bookReturnTransaction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bookReturnTransaction) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 2)
	b.fieldMap["request_id"] = b.RequestID
	b.fieldMap["created_at"] = b.CreatedAt
}

func (b bookReturnTransaction) clone(db *gorm.DB) bookReturnTransaction {
	b.bookReturnTransactionDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bookReturnTransaction) replaceDB(db *gorm.DB) bookReturnTransaction {
	b.bookReturnTransactionDo.ReplaceDB(db)
	return b
}

type bookReturnTransactionDo struct{ gen.DO }

type IBookReturnTransactionDo interface {
	gen.SubQuery
	Debug() IBookReturnTransactionDo
	WithContext(ctx context.Context) IBookReturnTransactionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBookReturnTransactionDo
	WriteDB() IBookReturnTransactionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBookReturnTransactionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBookReturnTransactionDo
	Not(conds ...gen.Condition) IBookReturnTransactionDo
	Or(conds ...gen.Condition) IBookReturnTransactionDo
	Select(conds ...field.Expr) IBookReturnTransactionDo
	Where(conds ...gen.Condition) IBookReturnTransactionDo
	Order(conds ...field.Expr) IBookReturnTransactionDo
	Distinct(cols ...field.Expr) IBookReturnTransactionDo
	Omit(cols ...field.Expr) IBookReturnTransactionDo
	Join(table schema.Tabler, on ...field.Expr) IBookReturnTransactionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBookReturnTransactionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBookReturnTransactionDo
	Group(cols ...field.Expr) IBookReturnTransactionDo
	Having(conds ...gen.Condition) IBookReturnTransactionDo
	Limit(limit int) IBookReturnTransactionDo
	Offset(offset int) IBookReturnTransactionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBookReturnTransactionDo
	Unscoped() IBookReturnTransactionDo
	Create(values ...*model.BookReturnTransaction) error
	CreateInBatches(values []*model.BookReturnTransaction, batchSize int) error
	Save(values ...*model.BookReturnTransaction) error
	First() (*model.BookReturnTransaction, error)
	Take() (*model.BookReturnTransaction, error)
	Last() (*model.BookReturnTransaction, error)
	Find() ([]*model.BookReturnTransaction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BookReturnTransaction, err error)
	FindInBatches(result *[]*model.BookReturnTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BookReturnTransaction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBookReturnTransactionDo
	Assign(attrs ...field.AssignExpr) IBookReturnTransactionDo
	Joins(fields ...field.RelationField) IBookReturnTransactionDo
	Preload(fields ...field.RelationField) IBookReturnTransactionDo
	FirstOrInit() (*model.BookReturnTransaction, error)
	FirstOrCreate() (*model.BookReturnTransaction, error)
	FindByPage(offset int, limit int) (result []*model.BookReturnTransaction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBookReturnTransactionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bookReturnTransactionDo) Debug() IBookReturnTransactionDo {
	return b.withDO(b.DO.Debug())
}

func (b bookReturnTransactionDo) WithContext(ctx context.Context) IBookReturnTransactionDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bookReturnTransactionDo) ReadDB() IBookReturnTransactionDo {
	return b.Clauses(dbresolver.Read)
}

func (b bookReturnTransactionDo) WriteDB() IBookReturnTransactionDo {
	return b.Clauses(dbresolver.Write)
}

func (b bookReturnTransactionDo) Session(config *gorm.Session) IBookReturnTransactionDo {
	return b.withDO(b.DO.Session(config))
}

func (b bookReturnTransactionDo) Clauses(conds ...clause.Expression) IBookReturnTransactionDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bookReturnTransactionDo) Returning(value interface{}, columns ...string) IBookReturnTransactionDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bookReturnTransactionDo) Not(conds ...gen.Condition) IBookReturnTransactionDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bookReturnTransactionDo) Or(conds ...gen.Condition) IBookReturnTransactionDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bookReturnTransactionDo) Select(conds ...field.Expr) IBookReturnTransactionDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bookReturnTransactionDo) Where(conds ...gen.Condition) IBookReturnTransactionDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bookReturnTransactionDo) Order(conds ...field.Expr) IBookReturnTransactionDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bookReturnTransactionDo) Distinct(cols ...field.Expr) IBookReturnTransactionDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bookReturnTransactionDo) Omit(cols ...field.Expr) IBookReturnTransactionDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bookReturnTransactionDo) Join(table schema.Tabler, on ...field.Expr) IBookReturnTransactionDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bookReturnTransactionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBookReturnTransactionDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bookReturnTransactionDo) RightJoin(table schema.Tabler, on ...field.Expr) IBookReturnTransactionDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bookReturnTransactionDo) Group(cols ...field.Expr) IBookReturnTransactionDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bookReturnTransactionDo) Having(conds ...gen.Condition) IBookReturnTransactionDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bookReturnTransactionDo) Limit(limit int) IBookReturnTransactionDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bookReturnTransactionDo) Offset(offset int) IBookReturnTransactionDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bookReturnTransactionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBookReturnTransactionDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bookReturnTransactionDo) Unscoped() IBookReturnTransactionDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bookReturnTransactionDo) Create(values ...*model.BookReturnTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bookReturnTransactionDo) CreateInBatches(values []*model.BookReturnTransaction, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bookReturnTransactionDo) Save(values ...*model.BookReturnTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bookReturnTransactionDo) First() (*model.BookReturnTransaction, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookReturnTransaction), nil
	}
}

func (b bookReturnTransactionDo) Take() (*model.BookReturnTransaction, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookReturnTransaction), nil
	}
}

func (b bookReturnTransactionDo) Last() (*model.BookReturnTransaction, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookReturnTransaction), nil
	}
}

func (b bookReturnTransactionDo) Find() ([]*model.BookReturnTransaction, error) {
	result, err := b.DO.Find()
	return result.([]*model.BookReturnTransaction), err
}

func (b bookReturnTransactionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BookReturnTransaction, err error) {
	buf := make([]*model.BookReturnTransaction, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bookReturnTransactionDo) FindInBatches(result *[]*model.BookReturnTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bookReturnTransactionDo) Attrs(attrs ...field.AssignExpr) IBookReturnTransactionDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bookReturnTransactionDo) Assign(attrs ...field.AssignExpr) IBookReturnTransactionDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bookReturnTransactionDo) Joins(fields ...field.RelationField) IBookReturnTransactionDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bookReturnTransactionDo) Preload(fields ...field.RelationField) IBookReturnTransactionDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bookReturnTransactionDo) FirstOrInit() (*model.BookReturnTransaction, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookReturnTransaction), nil
	}
}

func (b bookReturnTransactionDo) FirstOrCreate() (*model.BookReturnTransaction, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookReturnTransaction), nil
	}
}

func (b bookReturnTransactionDo) FindByPage(offset int, limit int) (result []*model.BookReturnTransaction, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bookReturnTransactionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bookReturnTransactionDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bookReturnTransactionDo) Delete(models ...*model.BookReturnTransaction) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bookReturnTransactionDo) withDO(do gen.Dao) *bookReturnTransactionDo {
	b.DO = *do.(*gen.DO)
	return b
}
