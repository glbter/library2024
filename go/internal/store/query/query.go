// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                     = new(Query)
	Author                *author
	Book                  *book
	BookLendRequest       *bookLendRequest
	BookLendTransaction   *bookLendTransaction
	BookReturnTransaction *bookReturnTransaction
	BookToAuthor          *bookToAuthor
	BookToGenre           *bookToGenre
	Genre                 *genre
	Session               *session
	User                  *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Author = &Q.Author
	Book = &Q.Book
	BookLendRequest = &Q.BookLendRequest
	BookLendTransaction = &Q.BookLendTransaction
	BookReturnTransaction = &Q.BookReturnTransaction
	BookToAuthor = &Q.BookToAuthor
	BookToGenre = &Q.BookToGenre
	Genre = &Q.Genre
	Session = &Q.Session
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		Author:                newAuthor(db, opts...),
		Book:                  newBook(db, opts...),
		BookLendRequest:       newBookLendRequest(db, opts...),
		BookLendTransaction:   newBookLendTransaction(db, opts...),
		BookReturnTransaction: newBookReturnTransaction(db, opts...),
		BookToAuthor:          newBookToAuthor(db, opts...),
		BookToGenre:           newBookToGenre(db, opts...),
		Genre:                 newGenre(db, opts...),
		Session:               newSession(db, opts...),
		User:                  newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Author                author
	Book                  book
	BookLendRequest       bookLendRequest
	BookLendTransaction   bookLendTransaction
	BookReturnTransaction bookReturnTransaction
	BookToAuthor          bookToAuthor
	BookToGenre           bookToGenre
	Genre                 genre
	Session               session
	User                  user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		Author:                q.Author.clone(db),
		Book:                  q.Book.clone(db),
		BookLendRequest:       q.BookLendRequest.clone(db),
		BookLendTransaction:   q.BookLendTransaction.clone(db),
		BookReturnTransaction: q.BookReturnTransaction.clone(db),
		BookToAuthor:          q.BookToAuthor.clone(db),
		BookToGenre:           q.BookToGenre.clone(db),
		Genre:                 q.Genre.clone(db),
		Session:               q.Session.clone(db),
		User:                  q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		Author:                q.Author.replaceDB(db),
		Book:                  q.Book.replaceDB(db),
		BookLendRequest:       q.BookLendRequest.replaceDB(db),
		BookLendTransaction:   q.BookLendTransaction.replaceDB(db),
		BookReturnTransaction: q.BookReturnTransaction.replaceDB(db),
		BookToAuthor:          q.BookToAuthor.replaceDB(db),
		BookToGenre:           q.BookToGenre.replaceDB(db),
		Genre:                 q.Genre.replaceDB(db),
		Session:               q.Session.replaceDB(db),
		User:                  q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Author                IAuthorDo
	Book                  IBookDo
	BookLendRequest       IBookLendRequestDo
	BookLendTransaction   IBookLendTransactionDo
	BookReturnTransaction IBookReturnTransactionDo
	BookToAuthor          IBookToAuthorDo
	BookToGenre           IBookToGenreDo
	Genre                 IGenreDo
	Session               ISessionDo
	User                  IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Author:                q.Author.WithContext(ctx),
		Book:                  q.Book.WithContext(ctx),
		BookLendRequest:       q.BookLendRequest.WithContext(ctx),
		BookLendTransaction:   q.BookLendTransaction.WithContext(ctx),
		BookReturnTransaction: q.BookReturnTransaction.WithContext(ctx),
		BookToAuthor:          q.BookToAuthor.WithContext(ctx),
		BookToGenre:           q.BookToGenre.WithContext(ctx),
		Genre:                 q.Genre.WithContext(ctx),
		Session:               q.Session.WithContext(ctx),
		User:                  q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
