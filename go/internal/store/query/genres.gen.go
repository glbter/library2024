// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"library/internal/store/model"
)

func newGenre(db *gorm.DB, opts ...gen.DOOption) genre {
	_genre := genre{}

	_genre.genreDo.UseDB(db, opts...)
	_genre.genreDo.UseModel(&model.Genre{})

	tableName := _genre.genreDo.TableName()
	_genre.ALL = field.NewAsterisk(tableName)
	_genre.ID = field.NewInt16(tableName, "id")
	_genre.Name = field.NewString(tableName, "name")

	_genre.fillFieldMap()

	return _genre
}

type genre struct {
	genreDo genreDo

	ALL  field.Asterisk
	ID   field.Int16
	Name field.String

	fieldMap map[string]field.Expr
}

func (g genre) Table(newTableName string) *genre {
	g.genreDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g genre) As(alias string) *genre {
	g.genreDo.DO = *(g.genreDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *genre) updateTableName(table string) *genre {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt16(table, "id")
	g.Name = field.NewString(table, "name")

	g.fillFieldMap()

	return g
}

func (g *genre) WithContext(ctx context.Context) IGenreDo { return g.genreDo.WithContext(ctx) }

func (g genre) TableName() string { return g.genreDo.TableName() }

func (g genre) Alias() string { return g.genreDo.Alias() }

func (g genre) Columns(cols ...field.Expr) gen.Columns { return g.genreDo.Columns(cols...) }

func (g *genre) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *genre) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 2)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
}

func (g genre) clone(db *gorm.DB) genre {
	g.genreDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g genre) replaceDB(db *gorm.DB) genre {
	g.genreDo.ReplaceDB(db)
	return g
}

type genreDo struct{ gen.DO }

type IGenreDo interface {
	gen.SubQuery
	Debug() IGenreDo
	WithContext(ctx context.Context) IGenreDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGenreDo
	WriteDB() IGenreDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGenreDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGenreDo
	Not(conds ...gen.Condition) IGenreDo
	Or(conds ...gen.Condition) IGenreDo
	Select(conds ...field.Expr) IGenreDo
	Where(conds ...gen.Condition) IGenreDo
	Order(conds ...field.Expr) IGenreDo
	Distinct(cols ...field.Expr) IGenreDo
	Omit(cols ...field.Expr) IGenreDo
	Join(table schema.Tabler, on ...field.Expr) IGenreDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGenreDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGenreDo
	Group(cols ...field.Expr) IGenreDo
	Having(conds ...gen.Condition) IGenreDo
	Limit(limit int) IGenreDo
	Offset(offset int) IGenreDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGenreDo
	Unscoped() IGenreDo
	Create(values ...*model.Genre) error
	CreateInBatches(values []*model.Genre, batchSize int) error
	Save(values ...*model.Genre) error
	First() (*model.Genre, error)
	Take() (*model.Genre, error)
	Last() (*model.Genre, error)
	Find() ([]*model.Genre, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Genre, err error)
	FindInBatches(result *[]*model.Genre, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Genre) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGenreDo
	Assign(attrs ...field.AssignExpr) IGenreDo
	Joins(fields ...field.RelationField) IGenreDo
	Preload(fields ...field.RelationField) IGenreDo
	FirstOrInit() (*model.Genre, error)
	FirstOrCreate() (*model.Genre, error)
	FindByPage(offset int, limit int) (result []*model.Genre, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGenreDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g genreDo) Debug() IGenreDo {
	return g.withDO(g.DO.Debug())
}

func (g genreDo) WithContext(ctx context.Context) IGenreDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g genreDo) ReadDB() IGenreDo {
	return g.Clauses(dbresolver.Read)
}

func (g genreDo) WriteDB() IGenreDo {
	return g.Clauses(dbresolver.Write)
}

func (g genreDo) Session(config *gorm.Session) IGenreDo {
	return g.withDO(g.DO.Session(config))
}

func (g genreDo) Clauses(conds ...clause.Expression) IGenreDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g genreDo) Returning(value interface{}, columns ...string) IGenreDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g genreDo) Not(conds ...gen.Condition) IGenreDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g genreDo) Or(conds ...gen.Condition) IGenreDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g genreDo) Select(conds ...field.Expr) IGenreDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g genreDo) Where(conds ...gen.Condition) IGenreDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g genreDo) Order(conds ...field.Expr) IGenreDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g genreDo) Distinct(cols ...field.Expr) IGenreDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g genreDo) Omit(cols ...field.Expr) IGenreDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g genreDo) Join(table schema.Tabler, on ...field.Expr) IGenreDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g genreDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGenreDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g genreDo) RightJoin(table schema.Tabler, on ...field.Expr) IGenreDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g genreDo) Group(cols ...field.Expr) IGenreDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g genreDo) Having(conds ...gen.Condition) IGenreDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g genreDo) Limit(limit int) IGenreDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g genreDo) Offset(offset int) IGenreDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g genreDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGenreDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g genreDo) Unscoped() IGenreDo {
	return g.withDO(g.DO.Unscoped())
}

func (g genreDo) Create(values ...*model.Genre) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g genreDo) CreateInBatches(values []*model.Genre, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g genreDo) Save(values ...*model.Genre) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g genreDo) First() (*model.Genre, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Genre), nil
	}
}

func (g genreDo) Take() (*model.Genre, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Genre), nil
	}
}

func (g genreDo) Last() (*model.Genre, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Genre), nil
	}
}

func (g genreDo) Find() ([]*model.Genre, error) {
	result, err := g.DO.Find()
	return result.([]*model.Genre), err
}

func (g genreDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Genre, err error) {
	buf := make([]*model.Genre, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g genreDo) FindInBatches(result *[]*model.Genre, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g genreDo) Attrs(attrs ...field.AssignExpr) IGenreDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g genreDo) Assign(attrs ...field.AssignExpr) IGenreDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g genreDo) Joins(fields ...field.RelationField) IGenreDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g genreDo) Preload(fields ...field.RelationField) IGenreDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g genreDo) FirstOrInit() (*model.Genre, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Genre), nil
	}
}

func (g genreDo) FirstOrCreate() (*model.Genre, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Genre), nil
	}
}

func (g genreDo) FindByPage(offset int, limit int) (result []*model.Genre, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g genreDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g genreDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g genreDo) Delete(models ...*model.Genre) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *genreDo) withDO(do gen.Dao) *genreDo {
	g.DO = *do.(*gen.DO)
	return g
}
